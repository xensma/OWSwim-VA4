name: build-owswim-va4

on:
  workflow_dispatch:
  push:
    branches: [ main, master ]

jobs:
  build:
    runs-on: ubuntu-latest
    env:
      JAR: ${{ github.workspace }}/tools/monkeybrains-8.2.3.jar
      JUNGLE: ${{ github.workspace }}/monkey.jungle
      OUTDIR: ${{ github.workspace }}/bin
      TOOLS: ${{ github.workspace }}/tools
      DEVICES_DIR: ${{ github.workspace }}/devices
      DEVICES: "vivoactive4 vivoactive4s"

    steps:
      - uses: actions/checkout@v4

      - uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: '17'

      - uses: actions/setup-python@v5
        with:
          python-version: '3.x'

      - name: Install Pillow
        run: |
          python -m pip install --upgrade pip
          python -m pip install Pillow

      - name: Ensure dirs
        run: |
          mkdir -p "$OUTDIR" "$TOOLS"

      - name: Provide developer key (DER)
        shell: bash
        run: |
          set -euo pipefail
          # 1) CIQ_DEV_KEY_B64 (recommandé) -> DER
          if [ -n "${{ secrets.CIQ_DEV_KEY_B64 }}" ]; then
            printf '%s' "${{ secrets.CIQ_DEV_KEY_B64 }}" | base64 -d > developer_key || {
              echo "ERREUR: CIQ_DEV_KEY_B64 invalide (Base64)."; exit 1; }
          # 2) CIQ_DEV_KEY (fallback): peut être DER binaire encodé en texte ou PEM
          elif [ -n "${{ secrets.CIQ_DEV_KEY }}" ]; then
            printf '%s' "${{ secrets.CIQ_DEV_KEY }}" > developer_key
          fi

          if [ ! -s developer_key ]; then
            echo "ERREUR: developer_key manquant. Renseigne CIQ_DEV_KEY_B64 (Base64 du .der) ou CIQ_DEV_KEY."; exit 1
          fi

          # Si c'est du PEM (-----BEGIN PRIVATE KEY-----), convertis en DER
          if head -c 64 developer_key | grep -q 'BEGIN'; then
            mv developer_key developer_key.pem
            openssl pkcs8 -topk8 -nocrypt -inform PEM -outform DER \
              -in developer_key.pem -out developer_key
            rm -f developer_key.pem
          fi

          # Refuse un fichier texte
          if file developer_key | grep -iq 'text'; then
            echo "ERREUR: developer_key semble être du texte. Utilise CIQ_DEV_KEY_B64 (Base64 du fichier DER)."
            exit 1
          fi

      - name: Generate launcher icon (40x40 PNG)
        run: |
          python -c "from PIL import Image, ImageDraw; import os; p='resources/drawables'; os.makedirs(p, exist_ok=True); img=Image.new('RGBA',(40,40),(0,0,0,0)); d=ImageDraw.Draw(img); d.ellipse((8,8,32,32), outline=(0,0,0,255), width=2); d.line((20,10,20,30), fill=(0,0,0,255), width=2); d.line((12,20,28,20), fill=(0,0,0,255), width=2); img.save(os.path.join(p,'LauncherIcon.png'))"

      - name: Create minimal devices.xml (no heredoc)
        run: |
          printf '%s\n' '<?xml version="1.0" encoding="UTF-8"?>' '<devices>' '  <device id="vivoactive4"/>' '  <device id="vivoactive4s"/>' '</devices>' > "$TOOLS/devices.xml"

      - name: Debug tree
        shell: bash
        run: |
          set -euxo pipefail
          echo "=== files (depth 2) ==="; find . -maxdepth 2 -type f | sort
          echo "=== tools ==="; ls -l "$TOOLS" || true
          echo "=== devices ==="; ls -l "$DEVICES_DIR" || true
          echo "developer_key bytes:"; [ -f developer_key ] && wc -c developer_key || echo 0

      - name: Sanity checks
        shell: bash
        run: |
          set -euxo pipefail
          test -s "$JAR"
          test -s "$TOOLS/api.db"
          test -s "$TOOLS/api.mir"
          test -s "$TOOLS/compilerInfo.xml"
          test -s "$TOOLS/projectInfo.xml"
          test -s "$TOOLS/devices.xml"
          test -s "$JUNGLE"
          test -s "${{ github.workspace }}/manifest.xml"
          java -Xms512m -Dfile.encoding=UTF-8 -jar "$JAR" -v

      - name: Build .prg per device (robuste)
        id: compile
        shell: bash
        run: |
          set -euo pipefail
          KEY="${{ github.workspace }}/developer_key"
          built=""
          for dev in $DEVICES; do
            DBG_XML="$DEVICES_DIR/${dev}-api.debug.xml"
            if [ ! -s "$DBG_XML" ]; then echo "Skip $dev (no $DBG_XML)"; continue; fi
            OUT="$OUTDIR/OWSwim_${dev}.prg"
            LOG="$OUTDIR/build_${dev}.log"
            echo "=== Compile for $dev -> $OUT ==="
            set +e
            # A) avec -d ASCII + -u devices.xml
            java -Xms1g -Dfile.encoding=UTF-8 -jar "$JAR" \
              -o "$OUT" -f "$JUNGLE" -y "$KEY" \
              -b "$TOOLS/api.mir" -a "$TOOLS/api.db" \
              -i "$DBG_XML" -d "$dev" \
              -p "$TOOLS/projectInfo.xml" -u "$TOOLS/devices.xml" -w -r >"$LOG" 2>&1
            rc=$?
            if [ $rc -ne 0 ]; then
              echo "WARN: retry without -d (infer from -i)"; 
              # B) sans -d
              java -Xms1g -Dfile.encoding=UTF-8 -jar "$JAR" \
                -o "$OUT" -f "$JUNGLE" -y "$KEY" \
                -b "$TOOLS/api.mir" -a "$TOOLS/api.db" \
                -i "$DBG_XML" \
                -p "$TOOLS/projectInfo.xml" -u "$TOOLS/devices.xml" -w -r >"$LOG" 2>&1
              rc=$?
            fi
            set -e
            if [ $rc -ne 0 ]; then
              echo "::error::monkeyc failed for $dev"; tail -n 120 "$LOG" || true; exit $rc
            fi
            built="$built $dev"
          done
          echo "built=$built" >> "$GITHUB_OUTPUT"
          [ -n "$built" ] || { echo "Aucun device compilé (ajoute devices/*-api.debug.xml)."; exit 1; }

      - name: Package .iq per device
        if: steps.compile.outputs.built != ''
        env:
          BUILT_DEVICES: ${{ steps.compile.outputs.built }}
        shell: bash
        run: |
          set -euo pipefail
          KEY="${{ github.workspace }}/developer_key"
          for dev in $BUILT_DEVICES; do
            DBG_XML="$DEVICES_DIR/${dev}-api.debug.xml"
            IQ="$OUTDIR/OWSwim_${dev}.iq"
            echo "=== Package $dev -> $IQ ==="
            java -Xms1g -Dfile.encoding=UTF-8 -jar "$JAR" \
              -e -o "$IQ" -f "$JUNGLE" -y "$KEY" \
              -i "$DBG_XML" \
              -p "$TOOLS/projectInfo.xml" -u "$TOOLS/devices.xml" -w -r
          done

      - uses: actions/upload-artifact@v4
        with:
          name: OWSwim_builds
          path: bin/*

      - uses: actions/upload-artifact@v4
        if: always()
        with:
          name: build-logs
          path: bin/*.log
          if-no-files-found: ignore
